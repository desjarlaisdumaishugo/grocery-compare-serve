{"version":3,"sources":["components/Item.tsx","components/converter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Item","state","geesA","geesB","priceA","priceB","unitA","unitB","quantA","quantB","convertToGeesFromUnit","theValue","unit","convertToUnitFromGees","pricePer100GeesA","pricePer100GeesB","renderCompareForm","style","margin","gutter","backgroundColor","title","label","onChange","value","setState","placeholder","Option","this","React","Converter","items","increment","decrement","layout","name","defaultValue","Array","from","e","i","type","block","onClick","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6WAgBqBA,E,4MACjBC,MAAe,CACXC,MAAO,EACPC,MAAO,EACPC,OAAQ,EACRC,OAAQ,EACRC,MAAO,IACPC,MAAO,IACPC,OAAQ,EACRC,OAAQ,G,EAGZC,sBAAwB,SAACC,EAAeC,GACpC,MAAY,KAARA,GAAuB,MAARA,EAAqBD,EACjB,IAAXA,G,EAGhBE,sBAAwB,SAACF,EAAeC,GACpC,MAAY,KAARA,GAAuB,MAARA,EAAqBD,EAC5BA,EAAW,K,EAG3BG,iBAAmB,WACf,OAAQ,EAAKb,MAAMG,OAAS,EAAKM,sBAAsB,EAAKT,MAAMO,OAAQ,EAAKP,MAAMK,OAAU,K,EAGnGS,iBAAmB,WACf,OAAQ,EAAKd,MAAMI,OAAS,EAAKK,sBAAsB,EAAKT,MAAMQ,OAAQ,EAAKR,MAAMM,OAAU,K,EAGnGS,kBAAoB,WAChB,OACI,gBAAC,IAAD,CAAMC,MAAO,CAAEC,OAAQ,KACnB,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAKC,OAAQ,IACT,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAMF,MAAO,CAACG,gBAAgB,EAAKN,oBAAsB,EAAKC,mBAAqB,UAAY,QAASM,MAAM,aAC1G,gBAAC,IAAKrB,KAAN,CAAWsB,MAAM,SACb,gBAAC,IAAD,CAAaC,SAAU,SAACC,GAAD,OAAW,EAAKC,SAAS,CAAErB,OAAQoB,GAAgB,KAAMA,MAAO,EAAKvB,MAAMG,UAEtG,gBAAC,IAAKJ,KAAN,CAAWsB,MAAM,YACb,gBAAC,IAAD,CAAaC,SAAU,SAACC,GAAD,OAAW,EAAKC,SAAS,CAAEjB,OAAQgB,GAAgB,KAAMA,MAAO,EAAKvB,MAAMO,UAEtG,gBAAC,IAAKR,KAAN,KACI,gBAAC,IAAD,CAAQuB,SAAU,SAACC,GAAD,OAAW,EAAKC,SAAS,CAAEnB,MAAOkB,KAAUA,MAAO,EAAKvB,MAAMK,MAAOoB,YAAY,yBAC/F,gBAAC,IAAOC,OAAR,CAAeH,MAAM,KAArB,KACA,gBAAC,IAAOG,OAAR,CAAeH,MAAM,MAArB,MACA,gBAAC,IAAOG,OAAR,CAAeH,MAAM,MAArB,MACA,gBAAC,IAAOG,OAAR,CAAeH,MAAM,KAArB,OAGR,yBAAI,EAAKV,mBAAT,sBAGR,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAMG,MAAO,CAACG,gBAAgB,EAAKN,oBAAsB,EAAKC,mBAAqB,UAAY,QAASM,MAAM,aAC1G,gBAAC,IAAKrB,KAAN,CAAWsB,MAAM,SACb,gBAAC,IAAD,CAAaC,SAAU,SAACC,GAAD,OAAW,EAAKC,SAAS,CAAEpB,OAAQmB,GAAgB,KAAMA,MAAO,EAAKvB,MAAMI,UAEtG,gBAAC,IAAKL,KAAN,CAAWsB,MAAM,YACb,gBAAC,IAAD,CAAaC,SAAU,SAACC,GAAD,OAAW,EAAKC,SAAS,CAAEhB,OAAQe,GAAgB,KAAMA,MAAO,EAAKvB,MAAMQ,UAEtG,gBAAC,IAAKT,KAAN,KACI,gBAAC,IAAD,CAAQuB,SAAU,SAACC,GAAD,OAAW,EAAKC,SAAS,CAAElB,MAAOiB,KAAUA,MAAO,EAAKvB,MAAMM,MAAOmB,YAAY,yBAC/F,gBAAC,IAAOC,OAAR,CAAeH,MAAM,KAArB,KACA,gBAAC,IAAOG,OAAR,CAAeH,MAAM,MAArB,MACA,gBAAC,IAAOG,OAAR,CAAeH,MAAM,MAArB,MACA,gBAAC,IAAOG,OAAR,CAAeH,MAAM,KAArB,OAGR,yBAAI,EAAKT,mBAAT,0B,uDAUxB,OACI,gCACKa,KAAKZ,yB,GAlFYa,aCNbC,E,4MACnB7B,MAAe,CACb8B,MAAO,G,EAGTC,UAAY,WACV,EAAKP,SAAS,CACZM,MAAQ,EAAK9B,MAAM8B,MAAQ,K,EAI/BE,UAAY,WACV,EAAKR,SAAS,CACZM,MAAQ,EAAK9B,MAAM8B,MAAQ,K,EAI/Bf,kBAAoB,WAClB,OACE,gBAAC,IAAD,CAAMC,MAAO,CAAEC,OAAQ,KACrB,gBAAC,IAAD,CAAMgB,OAAQ,UACZ,gBAAC,IAAD,KACE,gBAAC,IAAKlC,KAAN,CAAWmC,KAAK,UACd,gBAAC,IAAD,iCAIJ,gBAAC,IAAD,CAAKhB,OAAQ,IACX,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAME,MAAM,aACZ,gBAAC,IAAKrB,KAAN,CAAWsB,MAAM,QAAQa,KAAK,SAC5B,gBAAC,IAAD,OAEF,gBAAC,IAAKnC,KAAN,CAAWsB,MAAM,IAAIa,KAAK,YACxB,gBAAC,IAAD,OAEF,gBAAC,IAAKnC,KAAN,CAAWmC,KAAK,QACd,gBAAC,IAAD,CAAQC,aAAa,IAAIV,YAAY,yBACnC,gBAAC,IAAOC,OAAR,CAAeH,MAAM,KAArB,KACA,gBAAC,IAAOG,OAAR,CAAeH,MAAM,MAArB,MACA,gBAAC,IAAOG,OAAR,CAAeH,MAAM,KAArB,KACA,gBAAC,IAAOG,OAAR,CAAeH,MAAM,MAArB,UAKR,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAMH,MAAM,aACV,gBAAC,IAAKrB,KAAN,CAAWsB,MAAM,QAAQa,KAAK,UAC5B,gBAAC,IAAD,OAEF,gBAAC,IAAKnC,KAAN,CAAWsB,MAAM,WAAWa,KAAK,aAC/B,gBAAC,IAAD,OAEF,gBAAC,IAAKnC,KAAN,CAAWsB,MAAM,kBAAkBa,KAAK,SACtC,gBAAC,IAAD,CAAQC,aAAa,IAAIV,YAAY,yBACnC,gBAAC,IAAOC,OAAR,CAAeH,MAAM,KAArB,KACA,gBAAC,IAAOG,OAAR,CAAeH,MAAM,MAArB,MACA,gBAAC,IAAOG,OAAR,CAAeH,MAAM,KAArB,KACA,gBAAC,IAAOG,OAAR,CAAeH,MAAM,MAArB,c,uDAYd,OACE,gCACE,gBAAC,IAAD,KACGa,MAAMC,KAAKD,MAAMT,KAAK3B,MAAM8B,QAAQ,SAACQ,EAAGC,GACvC,OAAO,gBAAC,EAAD,UAGX,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAQC,KAAK,UAAUC,OAAK,EAACC,QAASf,KAAKI,WAA3C,aACA,gBAAC,IAAD,CAAQS,KAAK,UAAUC,OAAK,EAACC,QAASf,KAAKK,WAA3C,mB,GAhF6BJ,aCIxBe,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,8BACE,kBAAC,EAAD,SCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6417ec0e.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { Button, InputNumber, Col, Row, Select, Form, Checkbox, Card } from 'antd';\r\n\r\ninterface Props { }\r\n\r\ninterface State {\r\n    priceA: number,\r\n    priceB: number,\r\n    geesA: number,\r\n    geesB: number,\r\n    unitA: string,\r\n    unitB: string,\r\n    quantA: number,\r\n    quantB: number\r\n};\r\n\r\nexport default class Item extends React.Component<Props, State> {\r\n    state: State = {\r\n        geesA: 0,\r\n        geesB: 0,\r\n        priceA: 0,\r\n        priceB: 0,\r\n        unitA: \"g\",\r\n        unitB: \"g\",\r\n        quantA: 1,\r\n        quantB: 1\r\n    };\r\n\r\n    convertToGeesFromUnit = (theValue: any, unit: string) => {\r\n        if (unit == \"g\" || unit == \"ml\") return theValue;\r\n        else return theValue * 1000;\r\n    }\r\n\r\n    convertToUnitFromGees = (theValue: any, unit: string) => {\r\n        if (unit == \"g\" || unit == \"ml\") return theValue;\r\n        else return theValue / 1000;\r\n    }\r\n\r\n    pricePer100GeesA = () => {\r\n        return (this.state.priceA / this.convertToGeesFromUnit(this.state.quantA, this.state.unitA)) * 100;\r\n    }\r\n\r\n    pricePer100GeesB = () => {\r\n        return (this.state.priceB / this.convertToGeesFromUnit(this.state.quantB, this.state.unitB)) * 100;\r\n    }\r\n\r\n    renderCompareForm = () => {\r\n        return (\r\n            <Card style={{ margin: 10 }}>\r\n                <Form>\r\n                    <Row gutter={16}>\r\n                        <Col>\r\n                            <Card style={{backgroundColor:this.pricePer100GeesA() <= this.pricePer100GeesB() ? \"#11ff11\" : \"#fff\"}} title=\"Product A\">\r\n                                <Form.Item label=\"price\">\r\n                                    <InputNumber onChange={(value) => this.setState({ priceA: value ? value : 0 })} value={this.state.priceA} />\r\n                                </Form.Item>\r\n                                <Form.Item label=\"quantity\">\r\n                                    <InputNumber onChange={(value) => this.setState({ quantA: value ? value : 0 })} value={this.state.quantA} />\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    <Select onChange={(value) => this.setState({ unitA: value })} value={this.state.unitA} placeholder=\"Please select an unit\">\r\n                                        <Select.Option value=\"g\">g</Select.Option>\r\n                                        <Select.Option value=\"kg\">kg</Select.Option>\r\n                                        <Select.Option value=\"ml\">ml</Select.Option>\r\n                                        <Select.Option value=\"l\">l</Select.Option>\r\n                                    </Select>\r\n                                </Form.Item>\r\n                                <p>{this.pricePer100GeesA()} $ pour 100g/ml </p>\r\n                            </Card>\r\n                        </Col>\r\n                        <Col>\r\n                            <Card style={{backgroundColor:this.pricePer100GeesA() >= this.pricePer100GeesB() ? \"#11ff11\" : \"#fff\"}} title=\"Product B\">\r\n                                <Form.Item label=\"price\">\r\n                                    <InputNumber onChange={(value) => this.setState({ priceB: value ? value : 0 })} value={this.state.priceB} />\r\n                                </Form.Item>\r\n                                <Form.Item label=\"quantity\">\r\n                                    <InputNumber onChange={(value) => this.setState({ quantB: value ? value : 0 })} value={this.state.quantB} />\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    <Select onChange={(value) => this.setState({ unitB: value })} value={this.state.unitB} placeholder=\"Please select an unit\">\r\n                                        <Select.Option value=\"g\">g</Select.Option>\r\n                                        <Select.Option value=\"kg\">kg</Select.Option>\r\n                                        <Select.Option value=\"ml\">ml</Select.Option>\r\n                                        <Select.Option value=\"l\">l</Select.Option>\r\n                                    </Select>\r\n                                </Form.Item>\r\n                                <p>{this.pricePer100GeesB()} $ pour 100g/ml </p>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Card >\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.renderCompareForm()}\r\n            </>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\nimport { Button, InputNumber, Col, Row, Select, Form, Checkbox, Card } from 'antd';\r\nimport Item from './Item';\r\n\r\ninterface Props { }\r\n\r\ninterface State {\r\n  items: number;\r\n};\r\n\r\nexport default class Converter extends React.Component<Props, State> {\r\n  state: State = {\r\n    items: 1\r\n  };\r\n\r\n  increment = () => {\r\n    this.setState({\r\n      items: (this.state.items + 1)\r\n    });\r\n  };\r\n\r\n  decrement = () => {\r\n    this.setState({\r\n      items: (this.state.items - 1)\r\n    });\r\n  };\r\n\r\n  renderCompareForm = () => {\r\n    return (\r\n      <Card style={{ margin: 10 }}>\r\n        <Form layout={\"inline\"}>\r\n          <Row>\r\n            <Form.Item name=\"liquid\">\r\n              <Checkbox>This product is liquid</Checkbox>\r\n            </Form.Item>\r\n          </Row>\r\n\r\n          <Row gutter={16}>\r\n            <Col>\r\n              <Card title=\"Product A\">\r\n              <Form.Item label=\"price\" name=\"price\">\r\n                <InputNumber />\r\n              </Form.Item>\r\n              <Form.Item label=\"x\" name=\"quantity\">\r\n                <InputNumber />\r\n              </Form.Item>\r\n              <Form.Item name=\"unit\">\r\n                <Select defaultValue=\"g\" placeholder=\"Please select an unit\">\r\n                  <Select.Option value=\"g\">g</Select.Option>\r\n                  <Select.Option value=\"kg\">kg</Select.Option>\r\n                  <Select.Option value=\"g\">g</Select.Option>\r\n                  <Select.Option value=\"kg\">kg</Select.Option>\r\n                </Select>\r\n              </Form.Item>\r\n              </Card>\r\n            </Col>\r\n          <Col>\r\n            <Card title=\"Product B\">\r\n              <Form.Item label=\"price\" name=\"price2\">\r\n                <InputNumber />\r\n              </Form.Item>\r\n              <Form.Item label=\"quantity\" name=\"quantity2\">\r\n                <InputNumber />\r\n              </Form.Item>\r\n              <Form.Item label=\"unit of measure\" name=\"unit2\">\r\n                <Select defaultValue=\"g\" placeholder=\"Please select an unit\">\r\n                  <Select.Option value=\"g\">g</Select.Option>\r\n                  <Select.Option value=\"kg\">kg</Select.Option>\r\n                  <Select.Option value=\"g\">g</Select.Option>\r\n                  <Select.Option value=\"kg\">kg</Select.Option>\r\n                </Select>\r\n              </Form.Item>\r\n            </Card>\r\n          </Col>\r\n          </Row>\r\n        </Form>\r\n      </Card >\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Row>\r\n          {Array.from(Array(this.state.items), (e, i) => {\r\n            return <Item/>\r\n          })}\r\n        </Row>\r\n        <Row>\r\n          <Button type=\"primary\" block onClick={this.increment}>Increment</Button>\r\n          <Button type=\"primary\" block onClick={this.decrement}>Decrement</Button>\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Converter from './components/converter';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <main>\r\n        <Converter />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}